// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cs/proto/message/weaponLock.proto

package message

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WeaponLockToS struct {
	WeaponID             *uint32  `protobuf:"varint,1,req,name=weaponID" json:"weaponID,omitempty"`
	IsLock               *bool    `protobuf:"varint,2,req,name=isLock" json:"isLock,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WeaponLockToS) Reset()         { *m = WeaponLockToS{} }
func (m *WeaponLockToS) String() string { return proto.CompactTextString(m) }
func (*WeaponLockToS) ProtoMessage()    {}
func (*WeaponLockToS) Descriptor() ([]byte, []int) {
	return fileDescriptor_8478e70a2b973295, []int{0}
}

func (m *WeaponLockToS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeaponLockToS.Unmarshal(m, b)
}
func (m *WeaponLockToS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeaponLockToS.Marshal(b, m, deterministic)
}
func (m *WeaponLockToS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeaponLockToS.Merge(m, src)
}
func (m *WeaponLockToS) XXX_Size() int {
	return xxx_messageInfo_WeaponLockToS.Size(m)
}
func (m *WeaponLockToS) XXX_DiscardUnknown() {
	xxx_messageInfo_WeaponLockToS.DiscardUnknown(m)
}

var xxx_messageInfo_WeaponLockToS proto.InternalMessageInfo

func (m *WeaponLockToS) GetWeaponID() uint32 {
	if m != nil && m.WeaponID != nil {
		return *m.WeaponID
	}
	return 0
}

func (m *WeaponLockToS) GetIsLock() bool {
	if m != nil && m.IsLock != nil {
		return *m.IsLock
	}
	return false
}

type WeaponLockToC struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WeaponLockToC) Reset()         { *m = WeaponLockToC{} }
func (m *WeaponLockToC) String() string { return proto.CompactTextString(m) }
func (*WeaponLockToC) ProtoMessage()    {}
func (*WeaponLockToC) Descriptor() ([]byte, []int) {
	return fileDescriptor_8478e70a2b973295, []int{1}
}

func (m *WeaponLockToC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeaponLockToC.Unmarshal(m, b)
}
func (m *WeaponLockToC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeaponLockToC.Marshal(b, m, deterministic)
}
func (m *WeaponLockToC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeaponLockToC.Merge(m, src)
}
func (m *WeaponLockToC) XXX_Size() int {
	return xxx_messageInfo_WeaponLockToC.Size(m)
}
func (m *WeaponLockToC) XXX_DiscardUnknown() {
	xxx_messageInfo_WeaponLockToC.DiscardUnknown(m)
}

var xxx_messageInfo_WeaponLockToC proto.InternalMessageInfo

func init() {
	proto.RegisterType((*WeaponLockToS)(nil), "message.weaponLock_toS")
	proto.RegisterType((*WeaponLockToC)(nil), "message.weaponLock_toC")
}

func init() { proto.RegisterFile("cs/proto/message/weaponLock.proto", fileDescriptor_8478e70a2b973295) }

var fileDescriptor_8478e70a2b973295 = []byte{
	// 135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4c, 0x2e, 0xd6, 0x2f,
	0x28, 0xca, 0x2f, 0xc9, 0xd7, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0xd5, 0x2f, 0x4f, 0x4d,
	0x2c, 0xc8, 0xcf, 0xf3, 0xc9, 0x4f, 0xce, 0xd6, 0x03, 0x4b, 0x08, 0xb1, 0x43, 0x65, 0x94, 0x5c,
	0xb8, 0xf8, 0x10, 0x92, 0xf1, 0x25, 0xf9, 0xc1, 0x42, 0x52, 0x5c, 0x1c, 0x10, 0x11, 0x4f, 0x17,
	0x09, 0x46, 0x05, 0x26, 0x0d, 0xde, 0x20, 0x38, 0x5f, 0x48, 0x8c, 0x8b, 0x2d, 0xb3, 0x18, 0xa4,
	0x52, 0x82, 0x49, 0x81, 0x49, 0x83, 0x23, 0x08, 0xca, 0x53, 0x12, 0x40, 0x33, 0xc5, 0xd9, 0x49,
	0x29, 0x4a, 0x21, 0x33, 0x2f, 0xb3, 0x24, 0x33, 0x31, 0xa7, 0x24, 0xa3, 0x28, 0x35, 0x15, 0xe2,
	0x9e, 0xe4, 0xfc, 0x1c, 0xfd, 0xe4, 0x62, 0x98, 0xab, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb5,
	0x23, 0x1a, 0xa3, 0xa8, 0x00, 0x00, 0x00,
}
